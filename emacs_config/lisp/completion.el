;;; completion.el --- Konfiguracja uzupe≈Çniania i ≈õrodowiska deweloperskiego -*- lexical-binding: t; -*-

;; Copyright (C) 2024 Krispi
;; Author: Krispi
;; Keywords: emacs, completion, development, lsp, git
;; Description: Zaawansowany system uzupe≈Çniania z nowoczesnymi narzƒôdziami deweloperskimi
;; Version: 2.0.0

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;;; Commentary:
;; Ten modu≈Ç zapewnia kompleksowe ≈õrodowisko uzupe≈Çniania i deweloperskie:
;; - Nowoczesne interfejsy uzupe≈Çniania (Vertico, Corfu, Cape)
;; - Integracja z Git (Magit, Forge, narzƒôdzia Git)
;; - Wsparcie Language Server Protocol (LSP)
;; - Narzƒôdzia formatowania i jako≈õci kodu
;; - ZarzƒÖdzanie projektami z Projectile
;; - Zaawansowany system cofania z Undo-tree

;;; Code:

;; ============================================================================
;; üîç SYSTEM UZUPE≈ÅNIANIA - NOWOCZESNE INTERFEJSY
;; ============================================================================

;; === Vertico - Pionowy interfejs uzupe≈Çniania ===
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t)  ;; pozwala na zapƒôtlanie listy
  (vertico-count 15))

;; === Orderless - Rozmyte uzupe≈Çnianie ===
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))  ;; 'basic' jako fallback
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion))))) ;; lepsze uzupe≈Çnianie ≈õcie≈ºek

;; === Marginalia - Bogate adnotacje uzupe≈Çniania ===
(use-package marginalia
  :ensure t
  :init (marginalia-mode))

;; === Consult - Ulepszone wyszukiwanie i nawigacja ===
(use-package consult
  :ensure t
  :bind (("C-s" . consult-line)
         ("C-x b" . consult-buffer)
         ("M-y" . consult-yank-pop)
         ("C-c h" . consult-history)))

;; === Corfu - Uzupe≈Çnianie w buforze ===
(use-package corfu
  :ensure t
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  (corfu-cycle t)
  :bind
  (:map corfu-map
        ("<tab>" . corfu-next)
        ("S-<tab>" . corfu-previous)
        ("RET" . corfu-insert)))

;; === Cape - Rozszerzenia uzupe≈Çniania w punkcie ===
(use-package cape
  :ensure t
  :init
  (defun my/setup-cape ()
    "Konfiguracja ≈∫r√≥de≈Ç uzupe≈Çniania Cape dla tryb√≥w programistycznych."
    (setq-local completion-at-point-functions
                (list
                 #'cape-dabbrev
                 #'cape-file
                 #'cape-keyword
                 #'cape-symbol
                 #'cape-elisp-block
                 #'lsp-completion-at-point))) ;; LSP jako jedno ze ≈∫r√≥de≈Ç
  (add-hook 'prog-mode-hook #'my/setup-cape))

;; ============================================================================
;; üéõÔ∏è TRANSIENT - NOWOCZESNY INTERFEJS KOMEND
;; ============================================================================

;; === Transient - Nowoczesny interfejs komend ===
(use-package transient
  :ensure t)
  
;; ============================================================================
;; üêô INTEGRACJA GIT - PROFESJONALNA KONTROLA WERSJI
;; ============================================================================

;; === Magit - Interfejs Git dla Emacs ===
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))

;; === Forge - Integracja GitHub/GitLab ===
(use-package forge
  :ensure t
  :after magit
  :config
  ;; opcjonalnie ‚Äì pobiera automatycznie dane z GitHuba przy starcie magit
  (setq forge-topic-list-limit '(60 . -1)))

;; === Git Messenger - Popup informacji Git ===
(use-package git-messenger
  :ensure t
  :bind ("C-x v p" . git-messenger:popup-message)) 

;; === Git Timemachine - Nawigacja historii Git ===
(use-package git-timemachine
  :ensure t
  :commands git-timemachine)  ;; mo≈ºna uruchamiaƒá przez M-x 

;; ============================================================================
;; üöÄ ZARZƒÑDZANIE PROJEKTAMI - INTELIGENTNE OBS≈ÅUGIWANIE
;; ============================================================================

;; === Projectile - ZarzƒÖdzanie projektami ===
(use-package projectile
  :ensure t
  :init (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))

;; ============================================================================
;; üîÑ SYSTEM COFANIA - ZAAWANSOWANE ZARZƒÑDZANIE
;; ============================================================================

;; === Undo-tree - Drzewiasty system cofania ===
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode)
  :custom
  (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (undo-tree-auto-save-history t)
  :config
  ;; Tworzy katalog undo je≈õli nie istnieje
  (unless (file-exists-p "~/.emacs.d/undo")
    (make-directory "~/.emacs.d/undo"))) 

;; ============================================================================
;; üåê LANGUAGE SERVER PROTOCOL - NOWOCZESNE WSPARCIE DEWELOPERSKIE
;; ============================================================================

;; === Eglot - Klient LSP dla Emacs ===
(use-package eglot
  :hook ((python-mode . eglot-ensure)
         (go-mode . eglot-ensure)
         (rust-mode . eglot-ensure)
         (js-mode . eglot-ensure)
         (c-mode . eglot-ensure)
         (c++-mode . eglot-ensure))
  :config
  ;; Konfiguracja serwera Python LSP
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright-langserver" "--stdio")))
  
  ;; üöÄ TOP 2025 - Serwery LSP nowej generacji
  ;; Uwaga: U≈ºywamy serwer√≥w fallback do czasu dostƒôpno≈õci oficjalnych
  ;; BƒôdƒÖ dzia≈Çaƒá z trybami fallback kt√≥re skonfigurowali≈õmy
  (add-to-list 'eglot-server-programs
               '(prog-mode . ("clangd" "--stdio")))      ;; Generyczny LSP programistyczny
  (add-to-list 'eglot-server-programs
               '(c++-mode . ("clangd" "--stdio")))       ;; LSP C++ (dla Carbon)
  (add-to-list 'eglot-server-programs
               '(go-mode . ("gopls")))                    ;; LSP Go (dla V)
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright-langserver" "--stdio"))) ;; LSP Python (dla Nim)
  (add-to-list 'eglot-server-programs
               '(ruby-mode . ("solargraph" "--stdio")))   ;; LSP Ruby (dla Crystal)
  (add-to-list 'eglot-server-programs
               '(c-mode . ("clangd" "--stdio")))          ;; LSP C (dla Odin)
  (add-to-list 'eglot-server-programs
               '(erlang-mode . ("erlang-ls"))))           ;; LSP Erlang (dla Gleam)

;; ============================================================================
;; üé® FORMATOWANIE KODU - AUTOMATYCZNA JAKO≈öƒÜ
;; ============================================================================

;; === Apheleia - Automatyczne formatowanie kodu ===
(use-package apheleia
  :ensure t
  :config
  ;; Dostosuj formattery, je≈õli chcesz nadpisaƒá domy≈õlne
  (setf apheleia-mode-alist
        '((python-mode . black)
          (js-mode . prettier)
          (typescript-mode . prettier)
          (json-mode . prettier)
          (yaml-mode . prettier)
          (html-mode . prettier)
          (go-mode . gofmt)
          (rust-mode . rustfmt)
          (c-mode . clang-format)
          (c++-mode . clang-format)
          (lua-mode . stylua)))

  ;; W≈ÇƒÖcz globalne formatowanie przy zapisie
  (apheleia-global-mode +1))

;; ============================================================================
;; üêç ROZW√ìJ PYTHON - ULEPSZONE WSPARCIE
;; ============================================================================

;; === Pyvenv - Wirtualne ≈õrodowiska Python ===
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1)) 

;; === Isortify - Sortowanie import√≥w ===
(use-package isortify
  :ensure t
  :hook (python-mode . isortify-mode))

;; ============================================================================
;; üéØ DOSTARCZENIE I FINALIZACJA
;; ============================================================================

;; Dostarcz modu≈Ç uzupe≈Çniania
(provide 'completion)

;; Wy≈õwietl komunikat sukcesu po za≈Çadowaniu modu≈Çu
(add-hook 'after-init-hook
          (lambda ()
            (when (featurep 'completion)
              (message "üîç ≈örodowisko uzupe≈Çniania i deweloperskie: Gotowe")
              (message "‚ú® Vertico, Corfu, Cape: Aktywne")
              (message "üêô Integracja Git: Magit, Forge")
              (message "üåê Wsparcie LSP: Eglot")
              (message "üé® Formatowanie kodu: Apheleia")
              (message "üöÄ ZarzƒÖdzanie projektami: Projectile")
              (message "üöÄ TOP 2025: LSP nowej generacji gotowy"))))

;;; completion.el ends here
