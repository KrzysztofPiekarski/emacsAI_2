;;; core.el --- Podstawowa konfiguracja systemu Emacs -*- lexical-binding: t; -*-

;; Copyright (C) 2024 Krispi
;; Author: Krispi
;; Keywords: emacs, core, elpaca, packages, configuration
;; Description: Podstawowa konfiguracja systemu z mened≈ºerem pakiet√≥w Elpaca
;; Version: 2.0.0

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;;; Commentary:
;; Ten modu≈Ç zawiera podstawowƒÖ konfiguracjƒô systemu Emacs:
;; - Inicjalizacja mened≈ºera pakiet√≥w Elpaca
;; - Podstawowe ustawienia systemu
;; - Globalne zmienne i hooks
;; - Konfiguracja wydajno≈õci

;;; Code:

;; ============================================================================
;; üöÄ INICJALIZACJA SYSTEMU - PODSTAWOWE USTAWIENIA
;; ============================================================================

;; === Podstawowe ustawienia Emacs ===
(setq inhibit-startup-message t)           ;; Wy≈ÇƒÖcz wiadomo≈õƒá startowƒÖ
(setq initial-scratch-message nil)         ;; Pusty scratch buffer
(setq frame-title-format "%b")             ;; Tytu≈Ç ramki
(setq-default fill-column 80)              ;; Domy≈õlna szeroko≈õƒá tekstu

;; === Ustawienia wydajno≈õci ===
(setq gc-cons-threshold 100000000)         ;; Zwiƒôksz pr√≥g GC
(setq read-process-output-max (* 1024 1024)) ;; Zwiƒôksz bufor proces√≥w
(setq large-file-warning-threshold 100000000) ;; Zwiƒôksz pr√≥g du≈ºych plik√≥w

;; === Ustawienia edycji ===
(setq-default indent-tabs-mode nil)        ;; U≈ºywaj spacji zamiast tab√≥w
(setq-default tab-width 4)                 ;; Szeroko≈õƒá taba
(setq-default truncate-lines t)            ;; Obetnij d≈Çugie linie
(setq-default word-wrap t)                 ;; Zawijanie s≈Ç√≥w

;; ============================================================================
;; üì¶ ELPACA - NOWOCZESNY MENED≈ªER PAKIET√ìW
;; ============================================================================

;; === Elpaca - Inicjalizacja ===
;; Lokalizacja plik√≥w Elpaca w katalogu ~/.emacs.d/
;; 
;; Aby zainstalowaƒá Elpaca, uruchom w Emacs:
;; M-x eval-expression
;; (elpaca-bootstrap)
;; 
;; Lub skopiuj i wklej ten kod:
;; (defvar elpaca-installer-version 0.7)
;; (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
;; (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
;; (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
;; (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git" :ref nil :files (:defaults (:exclude "extensions")) :build (:not elpaca--activate-package)))
;; (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory)) (build (expand-file-name "elpaca/" elpaca-builds-directory)) (order (cdr elpaca-order)) (default-directory repo)) (add-to-list 'load-path (if (file-exists-p build) build repo)) (unless (file-exists-p repo) (make-directory repo t) (when (<= emacs-major-version 28) (require 'subr-x)) (condition-case-unless-debug err (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*")) ((zerop (apply #'call-process `("git" nil ,buffer t "clone" ,@(when-let* ((depth (plist-get order :depth))) (list (format "--depth=%d" depth) "--no-single-branch")) ,(plist-get order :repo) ,repo))) ((zerop (call-process "git" nil buffer t "checkout" (or (plist-get order :ref) "--")))) (emacs (concat invocation-directory invocation-name)) ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch" "--eval" "(byte-recompile-directory \".\" 0 'force)"))) ((require 'elpaca)) ((elpaca-generate-autoloads "elpaca" repo))) (progn (message "%s" (buffer-string)) (kill-buffer buffer)) (error "%s" (with-current-buffer buffer (buffer-string)))) ((error) (warn "%s" err) (delete-directory repo 'recursive)))) (unless (require 'elpaca-autoloads nil t) (require 'elpaca) (elpaca-generate-autoloads "elpaca" repo) (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(defvar elpaca-installer-version 0.7)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))

;; Sprawd≈∫ czy Elpaca jest ju≈º zainstalowana
(let ((repo  (expand-file-name "elpaca/" elpaca-repos-directory)))
  (when (file-exists-p repo)
    (add-to-list 'load-path repo)
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (require 'elpaca-autoloads))))

;; Inicjalizuj Elpaca tylko je≈õli jest dostƒôpna
(when (file-exists-p (expand-file-name "elpaca/" elpaca-repos-directory))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (condition-case err
      (progn
        ;; Sprawd≈∫ czy funkcja elpaca istnieje
        (if (fboundp 'elpaca)
            (progn
              (elpaca `(elpaca :repo "https://github.com/progfolio/elpaca.git"
                               :ref nil
                               :files (:defaults (:exclude "extensions"))
                               :build (:not elpaca--activate-package)))
              
              ;; W≈ÇƒÖcz elpaca-use-package tylko je≈õli Elpaca dzia≈Ça
              (if (fboundp 'elpaca-use-package)
                  (elpaca elpaca-use-package
                          :enable t
                          :hook (elpaca-use-package-mode . elpaca-use-package-autoloads-mode))
                (message "‚ö†Ô∏è elpaca-use-package nie jest dostƒôpny")))
          (message "‚ö†Ô∏è Funkcja elpaca nie jest dostƒôpna")))
    (error
     (message "‚ö†Ô∏è B≈ÇƒÖd inicjalizacji Elpaca: %s" (error-message-string err))
     (message "üì¶ Elpaca nie jest dostƒôpna - u≈ºywaj package.el jako fallback"))))

;; === Elpaca - Konfiguracja ===
(setq elpaca-use-package-by-default t)
(setq elpaca-use-package-hook-use-package-prepare-functions t)
(setq elpaca-use-package-hook-use-package-complete-functions t)

;; === Elpaca - Repozytoria pakiet√≥w ===
;; Elpaca automatycznie u≈ºywa standardowych repozytori√≥w
;; Melpa, Melpa Stable i GNU ELPA sƒÖ dostƒôpne domy≈õlnie

;; === Elpaca - Sprawdzenie dostƒôpno≈õci ===
;; Sprawd≈∫ czy Elpaca zosta≈Ça pomy≈õlnie za≈Çadowana
(add-hook 'after-init-hook
          (lambda ()
            (if (featurep 'elpaca)
                (message "üì¶ Elpaca: Pomy≈õlnie za≈Çadowany")
              (message "‚ö†Ô∏è Elpaca: Nie uda≈Ço siƒô za≈Çadowaƒá - u≈ºywam package.el"))))

;; === Elpaca - Funkcja bootstrap ===
;; Prosta funkcja do instalacji Elpaca
(defun elpaca-bootstrap ()
  "Zainstaluj Elpaca z repozytorium GitHub."
  (interactive)
  (message "üöÄ Rozpoczynam instalacjƒô Elpaca...")
  (let ((elpaca-dir (expand-file-name "elpaca/" user-emacs-directory)))
    (unless (file-exists-p elpaca-dir)
      (make-directory elpaca-dir t))
    (let ((default-directory elpaca-dir))
      (when (zerop (call-process "git" nil "*elpaca-install*" t "clone" "https://github.com/progfolio/elpaca.git" "."))
        (message "‚úÖ Elpaca zainstalowana pomy≈õlnie!")
        (message "üîÑ Zrestartuj Emacs aby aktywowaƒá Elpaca")))))

;; === Fallback do package.el ===
;; Je≈õli Elpaca nie jest dostƒôpna, u≈ºyj standardowego package.el
(unless (featurep 'elpaca)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (package-initialize)
  
  ;; Zainstaluj use-package je≈õli nie jest dostƒôpny
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package)))

;; === Sprawd≈∫ czy use-package jest dostƒôpny ===
;; Je≈õli nie, wy≈õwietl komunikat o konieczno≈õci instalacji
(unless (fboundp 'use-package)
  (message "‚ö†Ô∏è use-package nie jest dostƒôpny - zainstaluj go rƒôcznie"))

;; ============================================================================
;; üîß GLOBALNE HOOKS I KONFIGURACJA
;; ============================================================================

;; === Hooks dla tryb√≥w programistycznych ===
(add-hook 'prog-mode-hook 'display-line-numbers-mode)  ;; Numery linii
(add-hook 'prog-mode-hook 'hl-line-mode)              ;; Pod≈õwietl aktualnƒÖ liniƒô
(add-hook 'prog-mode-hook 'show-paren-mode)            ;; Poka≈º nawiasy

;; === Hooks dla tryb√≥w tekstowych ===
(add-hook 'text-mode-hook 'auto-fill-mode)             ;; Automatyczne zawijanie
(add-hook 'text-mode-hook 'flyspell-mode)              ;; Sprawdzanie pisowni

;; === Hooks dla wszystkich bufor√≥w ===
(add-hook 'find-file-hook 'auto-save-mode)             ;; Automatyczne zapisywanie

;; ============================================================================
;; üéØ DOSTARCZENIE I FINALIZACJA
;; ============================================================================

;; Dostarcz modu≈Ç core
(provide 'core)

;; Wy≈õwietl komunikat sukcesu po za≈Çadowaniu modu≈Çu
(add-hook 'after-init-hook
          (lambda ()
            (when (featurep 'core)
              (message "üöÄ Podstawowa konfiguracja systemu: Gotowa")
              (message "üì¶ Elpaca: Aktywny")
              (message "‚ö° Wydajno≈õƒá: Zoptymalizowana"))))

;;; core.el ends here
